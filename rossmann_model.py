# -*- coding: utf-8 -*-
"""NNDL CE811 - Group Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ENWmF83HO6RdGiKLbVSOpJCaVauqGu7F
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import os
import datetime

baseyear = 1900
store_df = pd.read_csv('store.csv')
store_df['Promo2SinceWeek'] = (store_df['Promo2SinceWeek'].fillna(0))
# store_df['PromoInterval'] = store_df['PromoInterval'].fillna('[0,0,0,0]') # This was stupid
store_df['CompetitionOpenSinceMonth'] = store_df['CompetitionOpenSinceMonth'].fillna(0)
store_df['CompetitionOpenSinceYear'] = store_df['CompetitionOpenSinceYear'] - baseyear
store_df['Promo2SinceYear'] = store_df['Promo2SinceYear'] - baseyear
store_df['CompetitionOpenSinceYear'] = store_df['CompetitionOpenSinceYear'].fillna(122)
store_df['Promo2SinceYear'] = store_df['Promo2SinceYear'].fillna(122)
store_df['CompetitionDistance'] = store_df['CompetitionDistance'].fillna(100000)
store_df = pd.get_dummies(store_df, columns=['StoreType', 'Assortment', 'PromoInterval'])
store_df['Promo2'] = store_df['Promo2'].astype(int)
store_df.isnull().sum(axis = 0)

store_df

train_df = pd.read_csv('train.csv')
train_df

def fill_in_missing_dates(df, date_col_name = 'Date', fill_val = np.nan, date_format='%Y-%m-%d'):
  df = df.copy()
  df.set_index(date_col_name,drop=True,inplace=True)
  df.index = pd.to_datetime(df.index, format = date_format)
  idx = pd.date_range(datetime.datetime(2013, 1, 1), df.index.max())
  df=df.reindex(idx,fill_value=fill_val)
  df['Store'] = df['Store'].fillna(int(df['Store'].mode()))
  df['DayOfWeek'] = df['DayOfWeek'].fillna(0)
  df['Sales'] = df['Sales'].fillna(0)
  df['Customers'] = df['Customers'].fillna(0)
  df['Open'] = df['Open'].fillna(0)
  df['Promo'] = df['Promo'].fillna(0)
  df['StateHoliday'] = df['StateHoliday'].fillna(0)
  df['SchoolHoliday'] = df['SchoolHoliday'].fillna(0)
  df['Date'] = df.index
  return df

train_df = pd.read_csv('train.csv')
storewise_history = pd.DataFrame()
for i in range(1, 1116):
  storewise_history = pd.concat([storewise_history, fill_in_missing_dates(train_df[train_df['Store'] == i])])
train_df = storewise_history

idx = np.arange(train_df.shape[0])
train_df['idx'] = idx.astype(int)
train_df.set_index(idx, drop=True, inplace=True)

train_df

train_df.isnull().sum(axis=0)

# train_df = pd.read_csv('train.csv')
temp = pd.DataFrame(train_df['Date'].astype(str).str.split('-').tolist(), columns=['Year', 'Month', 'Day'])
train_df = pd.concat([train_df, temp], axis=1)
train_df = train_df.drop(columns=['Date', 'idx'])
train_df['Year'] = train_df['Year'].astype(int) - baseyear
train_df['StateHoliday'] = train_df['StateHoliday'].astype(str)
train_df = pd.get_dummies(train_df, columns=['StateHoliday'])
train_df = train_df.astype(int)

train_df.isnull().sum(axis = 0)

train_df

train_df[(train_df['Store'] == 1) & (train_df['Year'] == 114)]

for id in range(1, 1116):
  if (train_df[(train_df['Store'] == id)].shape[0] != 942) and (train_df[(train_df['Store'] == id)].shape[0] != 758): #& (train_df['Year'] == 115) & (train_df['Month'] == 1) & (train_df['Day'] == 20)]
    print(train_df[(train_df['Store'] == id)].shape[0])
    print(id)
# Maybe fill in all values so all stores have data for 942 events
# ^ DONE

test_df = pd.read_csv('test.csv')
temp = pd.DataFrame(test_df['Date'].str.split('-').tolist(), columns=['Year', 'Month', 'Day'])
test_df = pd.concat([test_df, temp], axis=1)
test_df = test_df.drop(columns=['Date'])
test_df['Year'] = test_df['Year'].astype(int) - baseyear
test_df['Open'] = test_df['Open'].fillna(0)
test_df['StateHoliday'] = test_df['StateHoliday'].astype(str)
test_df = pd.get_dummies(test_df, columns=['StateHoliday'])
test_df = test_df.astype(int)

test_df.isnull().sum(axis = 0)

distance_arr = store_df['CompetitionDistance'].tolist()
competition_dist_min, competition_dist_max = min(distance_arr), max(distance_arr)
rescaled = []
for dist in distance_arr:
  rescaled.append((dist - competition_dist_min)/(competition_dist_max - competition_dist_min))
store_df['CompetitionDistance'] = rescaled

sales_total = train_df['Sales'].astype(float).values
sales_min, sales_max = min(sales_total), max(sales_total)
sales_scaled = []
for sale in sales_total:
  sales_scaled.append((sale-sales_min)/(sales_max-sales_min))
train_df['Sales'] = sales_scaled

train_data = train_df.drop(columns=['Customers']).values
store_data = store_df.values

# print(train_data.shape, store_data.shape)
train_examples = []
for i in range(len(train_data)):
  example = []

  for j in train_data[i]:
    example.append(j)

  for j in store_data[int(train_data[i][0])-1][1:]:
    example.append(j)

  train_examples.append(example)

len(train_examples)

test = np.array(train_examples).reshape(1115, 942, 29)

def smarter_lookup(train_examples, date,lookback=14, store_id=None):
  start_date = datetime.datetime(2013, 1, 1)
  curr_date = datetime.datetime(date[0]+baseyear, date[1], date[2])
  delta_days = (curr_date - start_date).days
  ret = np.array(train_examples).reshape(1115, 942, 29)
  if store_id == None:
    return ret[:, delta_days-lookback:delta_days, :]
  else:
    return ret[store_id - 1, delta_days-lookback:delta_days, :]

smarter_lookup(train_examples, (113, 1, 15), 5, 1).shape

print(train_examples[2])
# storeid, day of week, sales, open, promo, school holiday, year, month, day, stateholiday0, stateholidaya, stateholidayb, stateholidayc, compdist, compopenmonth, compopenyear, promo2,
# promo2week, promo2year, storetypea, storetypeb, storetypec, storetyped, assortmenta, assortmentb, assortmentc, promointerval1, promointerval2, promointerval3

import datetime

# train_examples: (-1, 29)

def fetch_previous_data(train_examples, date, lookback=14, storewise=False):
  train_examples = np.array(train_examples)
  day_idx, month_idx, year_idx = 8, 7, 6
  days_search = []
  ret_data = []
  day = datetime.datetime(date[0]+baseyear, date[1], date[2])
  for i in range(lookback):
      days_search.append(day - datetime.timedelta(days=i))
  # print(days_search)
  for _day in days_search:
    year = _day.year - baseyear
    month = _day.month
    day = _day.day
    # print(year, month, day)
    if storewise == False:
      ret_data.append(train_examples[(train_examples[:,year_idx] == year) & (train_examples[:, month_idx] == month) & (train_examples[:, day_idx] == day)])
    else:
      ret_data.append(train_examples[(train_examples[:,year_idx] == year) & (train_examples[:, month_idx] == month) & (train_examples[:, day_idx] == day) & (train_examples[:, 0] == storewise)])
  return ret_data

historic_data = fetch_previous_data(np.array(train_examples), [115, 1, 20], 15, 1)

historic_data = fetch_previous_data(np.array(train_examples), [115, 1, 20], 15, 1)
# print(historic_data)
for day_data in historic_data:
  print(day_data.shape)

lookback = 14

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Input(shape=(lookback, 29)))
model.add(tf.keras.layers.LSTM(10))
model.add(tf.keras.layers.Dense(8, activation='relu'))
model.add(tf.keras.layers.Dense(4, activation='relu'))
model.add(tf.keras.layers.Dense(2, activation='relu'))
model.add(tf.keras.layers.Dense(1, activation='relu'))

model.summary()

# X looks like (-1, lookback, 28) and Y looks like (-1, 1)
# Start date is 113 1 1 and end date is 115 7 31
#               113 1 15                115 7 31
X = []
for store in (1, 1116):
  for date in range(942-lookback):
    _day = datetime.datetime(2013,1,1) + datetime.timedelta(days=date)
    _day = [_day.year - 1900, _day.month, _day.day]
    X.append(smarter_lookup(np.array(train_examples), _day, lookback, store))

print(train_examples[2])
# storeid, day of week, sales, open, promo, school holiday, year, month, day, stateholiday0, stateholidaya, stateholidayb, stateholidayc, compdist, compopenmonth, compopenyear, promo2,
# promo2week, promo2year, storetypea, storetypeb, storetypec, storetyped, assortmenta, assortmentb, assortmentc, promointerval1, promointerval2, promointerval3

print(len(X), 942-lookback)

